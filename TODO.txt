X Cache config in serve/configuration.js !!!
X Fix infinite auth loop when user token is expired
X Remove default scope concept from embedded agent and root agent
X Test metadata pull for new approach
X Test uploads and downloads
X Move uploads and downloads to type backed scopes
X Reset needs to remove active, not set to null
X Fix test postgres config timeouts by reducing pressure on db
X Use js Date param trick for postgres wrapper to simplify query for metadata side effect
X Fix up and test all SQL mirror operations
X Better error behavior when special scope queries are broken
X Make root agent show default scope
X Fix expired auth token
X Use secure httpOnly cookies for ws sessions
X Move upload and download metadata to new format
X Allow Agent.download(id).direct() and Agent.download(id).url()
X Document vue binding
X Fix old session messages getting queued and passed to new sessions (because of using cookie sid instead of client prvided session)
  Bundle interaction messages to reduce websocket strain
  Compaction
X Batch inserts into postgres
  On domain config, return response with watchable request scope
  Make setting metadata type on object sufficient for triggering postgres update
  Add generic agent cache clearing for testing purposes
  Respect side effects for all patch array items, NOT just first
  Handlable "exit" event from embedded agents
  Cache downloaded content at agent level
  Throttle naughty clients (protect against infinite loops on the client)
  Agent retry downloads on 404 (useful if there was a recent upload... see TODO in patch-content.js though)
  Add a test for resetting
  Use create-folder-content in agent upload to handle upload of items and return one piece of content that is the content-graph
  Remove create-folder-content from home app
  Don't trigger json mutable state persistence change if value not changed
  Add new vuePersistentRef export to npm module for composition api usage
  Add error if trying to create persistent vue component from composition api component (guide user to use vuePersistentRef)
  Add ability to launch agents
  Bundle synchronously applied patches in mutable proxy as single patch operation
  Verify DNS A Names for candidate host before going through cert provisioning process
  Better protocol for patch request ingestion (feedback for requesting agent?)
  Make serve watch/update config (make function that helps with watcher pattern)

= Domain Administration
  Use DNS TXT record challenge to handle domain claims

  Live db
X   Choose managed postgres vendor
X   Launch to prod with credentials
    Confine firewall ip address access

  Authorization
    Admin specifies access rule queries
    Check for passing access rule query on cross-user state request (later handle cross domain requests with special queries)

= Hosting
  Provision certs like old core

= PILA Related
X 1)  track context of subscriptions... turns out tracking create/update of items is better
X 2)  save that context in a convenient way (postgres table)
X 3)  Make a sequence wrapper and some example content
X     - Editor
X       - remove item
X     - Player
X       - close stuff
  4)  Make sequence wrapper look good
X     - style free-response item
X       - player
X       - preview
X     - style rating item
X       - player
X       - preview
X     - implement multiple-choice
X       - player
X       - preview
X     - style multiple-choice
X       - player
X       - preview
X     - style sequence wrapper
X       - reasonable loading view for nodes
P       - breadcrumbs for context
X     - STRETCH:
X       - style editors for VDEs
X       - style editor site for VDEs
  5)  Consume that info to populate a generic dashboard
X     - add query with params ability so we can query for all users with mutation tags in a context
      - render list of users + content names + scopes with mutations in context
      - render data at selected scope on demand
  6)  Launch to a demo domain
  7)  Be able to assign and view dashboard as a teacher


Demo Outline

- show pre-made map:
  - https://sequence-example.knowlearning.systems/
  - emphasize it is embedding different domains
  - emphasize re-attachment scheme (default and possibilities... "calculator app" example)
  - stress that different items from different domains can provide customized summary views.  
- share pre-made map
- show dashboard progress of participants on pre-made map
  - "user maps have dashboard capabilities"
  - "3rd party item creators can adjust previews at their request without even needing to work through us"
  - show context (breadcrumb names of tag context) scope was mutated in
- show map editor
  - emphasize dragging from a foreign sources
  - item editors fully decoupled from each other and map
- edit new map
- share edited map
- show dashboard for new map with arbitrarily added items
